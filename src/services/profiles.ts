import { supabase } from '../lib/supabase';
import { Database } from '../lib/database.types';

type Profile = Database['public']['Tables']['profiles']['Row'];
type ProfileInsert = Database['public']['Tables']['profiles']['Insert'];
type ProfileUpdate = Database['public']['Tables']['profiles']['Update'];

export class ProfileService {
  // R√©cup√©rer tous les profils
  static async getAll(): Promise<Profile[]> {
    console.log('üîç ProfileService.getAll() - D√©but de la r√©cup√©ration des profils');
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .order('first_name', { ascending: true });

    if (error) {
      console.error('‚ùå ProfileService.getAll() - Erreur lors de la r√©cup√©ration des profils:', error);
      console.error('Error fetching profiles:', error);
      throw error;
    }

    console.log('‚úÖ ProfileService.getAll() - Profils r√©cup√©r√©s avec succ√®s:', data?.length || 0, 'profils');
    return data || [];
  }

  // R√©cup√©rer les profils par r√¥le
  static async getByRole(role: 'admin' | 'doctor' | 'secretary'): Promise<Profile[]> {
    console.log('üîç ProfileService.getByRole() - R√©cup√©ration des profils pour le r√¥le:', role);
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('role', role)
      .eq('is_active', true)
      .order('first_name', { ascending: true });

    if (error) {
      console.error('‚ùå ProfileService.getByRole() - Erreur lors de la r√©cup√©ration des profils par r√¥le:', error);
      console.error('Error fetching profiles by role:', error);
      throw error;
    }

    console.log('‚úÖ ProfileService.getByRole() - Profils r√©cup√©r√©s pour le r√¥le', role, ':', data?.length || 0, 'profils');
    return data || [];
  }

  // R√©cup√©rer un profil par ID
  static async getById(id: string): Promise<Profile | null> {
    console.log('üîç ProfileService.getById() - R√©cup√©ration du profil ID:', id);
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error('‚ùå ProfileService.getById() - Erreur lors de la r√©cup√©ration du profil:', error);
      console.error('Error fetching profile:', error);
      return null;
    }

    console.log('‚úÖ ProfileService.getById() - Profil r√©cup√©r√© avec succ√®s:', data.first_name, data.last_name, data.role);
    return data;
  }

  // Mettre √† jour un profil
  static async update(id: string, updates: ProfileUpdate): Promise<Profile> {
    console.log('üîç ProfileService.update() - Mise √† jour du profil ID:', id, 'avec les donn√©es:', updates);
    const { data, error } = await supabase
      .from('profiles')
      .update(updates)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('‚ùå ProfileService.update() - Erreur lors de la mise √† jour du profil:', error);
      console.error('Error updating profile:', error);
      throw error;
    }

    console.log('‚úÖ ProfileService.update() - Profil mis √† jour avec succ√®s:', data.id, data.first_name, data.last_name);
    return data;
  }

  // R√©cup√©rer les m√©decins avec leurs sp√©cialit√©s
  static async getDoctors(): Promise<Profile[]> {
    console.log('üîç ProfileService.getDoctors() - R√©cup√©ration de la liste des m√©decins');
    const result = await this.getByRole('doctor');
    console.log('‚úÖ ProfileService.getDoctors() - M√©decins r√©cup√©r√©s:', result.length, 'm√©decins');
    return result;
  }

  // R√©cup√©rer les statistiques des profils
  static async getStats() {
    console.log('üîç ProfileService.getStats() - R√©cup√©ration des statistiques des profils');
    const { data: profiles, error } = await supabase
      .from('profiles')
      .select('role, is_active');

    if (error) {
      console.error('‚ùå ProfileService.getStats() - Erreur lors de la r√©cup√©ration des statistiques des profils:', error);
      console.error('Error fetching profile stats:', error);
      throw error;
    }

    const total = profiles?.length || 0;
    const active = profiles?.filter(p => p.is_active).length || 0;
    const doctors = profiles?.filter(p => p.role === 'doctor').length || 0;
    const admins = profiles?.filter(p => p.role === 'admin').length || 0;
    const secretaries = profiles?.filter(p => p.role === 'secretary').length || 0;

    const stats = {
      total,
      active,
      inactive: total - active,
      doctors,
      admins,
      secretaries
    };
    
    console.log('‚úÖ ProfileService.getStats() - Statistiques des profils r√©cup√©r√©es:', stats);
    return stats;
  }
}