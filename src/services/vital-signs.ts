import { supabase } from '../lib/supabase';
import { Database } from '../lib/database.types';

type VitalSigns = Database['public']['Tables']['vital_signs']['Row'];
type VitalSignsInsert = Database['public']['Tables']['vital_signs']['Insert'];
type VitalSignsUpdate = Database['public']['Tables']['vital_signs']['Update'];

export class VitalSignsService {
  // R√©cup√©rer les constantes vitales d'un patient
  static async getByPatient(patientId: string): Promise<VitalSigns[]> {
    console.log('üîç VitalSignsService.getByPatient() - R√©cup√©ration des constantes vitales pour le patient:', patientId);
    const { data, error } = await supabase
      .from('vital_signs')
      .select(`
        *,
        recorded_by_profile:profiles!recorded_by(first_name, last_name)
      `)
      .eq('patient_id', patientId)
      .order('recorded_at', { ascending: false });

    if (error) {
      console.error('‚ùå VitalSignsService.getByPatient() - Erreur lors de la r√©cup√©ration des constantes vitales:', error);
      throw error;
    }

    console.log('‚úÖ VitalSignsService.getByPatient() - Constantes vitales r√©cup√©r√©es:', data?.length || 0, 'enregistrements');
    return data || [];
  }

  // R√©cup√©rer les derni√®res constantes vitales d'un patient
  static async getLatestByPatient(patientId: string): Promise<VitalSigns | null> {
    console.log('üîç VitalSignsService.getLatestByPatient() - R√©cup√©ration des derni√®res constantes vitales pour le patient:', patientId);
    const { data, error } = await supabase
      .from('vital_signs')
      .select('*')
      .eq('patient_id', patientId)
      .order('recorded_at', { ascending: false })
      .limit(1)
      .single();

    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
      console.error('‚ùå VitalSignsService.getLatestByPatient() - Erreur lors de la r√©cup√©ration des derni√®res constantes vitales:', error);
      throw error;
    }

    console.log('‚úÖ VitalSignsService.getLatestByPatient() - Derni√®res constantes vitales r√©cup√©r√©es:', data ? 'trouv√©es' : 'aucune');
    return data || null;
  }

  // Cr√©er de nouvelles constantes vitales
  static async create(vitalSigns: VitalSignsInsert): Promise<VitalSigns> {
    console.log('üîç VitalSignsService.create() - Cr√©ation de nouvelles constantes vitales:', vitalSigns);
    const { data: { user } } = await supabase.auth.getUser();
    
    const { data, error } = await supabase
      .from('vital_signs')
      .insert({
        ...vitalSigns,
        recorded_by: user?.id || vitalSigns.recorded_by
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå VitalSignsService.create() - Erreur lors de la cr√©ation des constantes vitales:', error);
      throw error;
    }

    console.log('‚úÖ VitalSignsService.create() - Constantes vitales cr√©√©es avec succ√®s:', data.id);
    return data;
  }

  // Mettre √† jour des constantes vitales
  static async update(id: string, updates: VitalSignsUpdate): Promise<VitalSigns> {
    console.log('üîç VitalSignsService.update() - Mise √† jour des constantes vitales ID:', id);
    const { data, error } = await supabase
      .from('vital_signs')
      .update(updates)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('‚ùå VitalSignsService.update() - Erreur lors de la mise √† jour des constantes vitales:', error);
      throw error;
    }

    console.log('‚úÖ VitalSignsService.update() - Constantes vitales mises √† jour avec succ√®s:', data.id);
    return data;
  }

  // Supprimer des constantes vitales
  static async delete(id: string): Promise<void> {
    console.log('üîç VitalSignsService.delete() - Suppression des constantes vitales ID:', id);
    const { error } = await supabase
      .from('vital_signs')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('‚ùå VitalSignsService.delete() - Erreur lors de la suppression des constantes vitales:', error);
      throw error;
    }
    
    console.log('‚úÖ VitalSignsService.delete() - Constantes vitales supprim√©es avec succ√®s:', id);
  }

  // Calculer l'IMC (Indice de Masse Corporelle)
  static calculateBMI(weight: number, height: number): number {
    if (weight <= 0 || height <= 0) return 0;
    const heightInMeters = height / 100;
    return Math.round((weight / (heightInMeters * heightInMeters)) * 10) / 10;
  }

  // Interpr√©ter l'IMC
  static interpretBMI(bmi: number): string {
    if (bmi < 18.5) return 'Insuffisance pond√©rale';
    if (bmi < 25) return 'Poids normal';
    if (bmi < 30) return 'Surpoids';
    return 'Ob√©sit√©';
  }

  // Interpr√©ter la tension art√©rielle
  static interpretBloodPressure(systolic: number, diastolic: number): string {
    if (systolic < 90 || diastolic < 60) return 'Hypotension';
    if (systolic < 120 && diastolic < 80) return 'Normale';
    if (systolic < 130 && diastolic < 80) return '√âlev√©e';
    if (systolic < 140 || diastolic < 90) return 'Hypertension stade 1';
    return 'Hypertension stade 2';
  }
}