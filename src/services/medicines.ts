import { supabase } from '../lib/supabase';
import { Database } from '../lib/database.types';

type Medicine = Database['public']['Tables']['medicines']['Row'];
type MedicineInsert = Database['public']['Tables']['medicines']['Insert'];
type MedicineUpdate = Database['public']['Tables']['medicines']['Update'];
type StockMovement = Database['public']['Tables']['stock_movements']['Row'];
type StockMovementInsert = Database['public']['Tables']['stock_movements']['Insert'];

export class MedicineService {
  // R√©cup√©rer tous les m√©dicaments
  static async getAll(): Promise<Medicine[]> {
    console.log('üîç MedicineService.getAll() - D√©but de la r√©cup√©ration des m√©dicaments');
    const { data, error } = await supabase
      .from('medicines')
      .select('*')
      .order('name', { ascending: true });

    if (error) {
      console.error('‚ùå MedicineService.getAll() - Erreur lors de la r√©cup√©ration des m√©dicaments:', error);
      console.error('Error fetching medicines:', error);
      throw error;
    }

    console.log('‚úÖ MedicineService.getAll() - M√©dicaments r√©cup√©r√©s avec succ√®s:', data?.length || 0, 'm√©dicaments');
    return data || [];
  }

  // R√©cup√©rer les m√©dicaments par cat√©gorie
  static async getByCategory(category: string): Promise<Medicine[]> {
    console.log('üîç MedicineService.getByCategory() - R√©cup√©ration des m√©dicaments de la cat√©gorie:', category);
    const { data, error } = await supabase
      .from('medicines')
      .select('*')
      .eq('category', category)
      .order('name', { ascending: true });

    if (error) {
      console.error('‚ùå MedicineService.getByCategory() - Erreur lors de la r√©cup√©ration des m√©dicaments par cat√©gorie:', error);
      console.error('Error fetching medicines by category:', error);
      throw error;
    }

    console.log('‚úÖ MedicineService.getByCategory() - M√©dicaments de la cat√©gorie r√©cup√©r√©s:', data?.length || 0, 'm√©dicaments');
    return data || [];
  }

  // R√©cup√©rer les m√©dicaments avec stock faible
  static async getLowStock(): Promise<Medicine[]> {
    console.log('üîç MedicineService.getLowStock() - R√©cup√©ration des m√©dicaments avec stock faible');
    const { data, error } = await supabase
      .from('medicines')
      .select('*')
      .filter('current_stock', 'lte', 'min_stock')
      .order('current_stock', { ascending: true });

    if (error) {
      console.error('‚ùå MedicineService.getLowStock() - Erreur lors de la r√©cup√©ration des m√©dicaments avec stock faible:', error);
      console.error('Error fetching low stock medicines:', error);
      throw error;
    }

    console.log('‚úÖ MedicineService.getLowStock() - M√©dicaments avec stock faible r√©cup√©r√©s:', data?.length || 0, 'm√©dicaments');
    return data || [];
  }

  // R√©cup√©rer les m√©dicaments expirant bient√¥t
  static async getExpiringSoon(days: number = 90): Promise<Medicine[]> {
    console.log('üîç MedicineService.getExpiringSoon() - R√©cup√©ration des m√©dicaments expirant dans', days, 'jours');
    const futureDate = new Date();
    futureDate.setDate(futureDate.getDate() + days);
    
    const { data, error } = await supabase
      .from('medicines')
      .select('*')
      .lte('expiry_date', futureDate.toISOString().split('T')[0])
      .gte('expiry_date', new Date().toISOString().split('T')[0])
      .order('expiry_date', { ascending: true });

    if (error) {
      console.error('‚ùå MedicineService.getExpiringSoon() - Erreur lors de la r√©cup√©ration des m√©dicaments expirant bient√¥t:', error);
      console.error('Error fetching expiring medicines:', error);
      throw error;
    }

    console.log('‚úÖ MedicineService.getExpiringSoon() - M√©dicaments expirant bient√¥t r√©cup√©r√©s:', data?.length || 0, 'm√©dicaments');
    return data || [];
  }

  // Cr√©er un nouveau m√©dicament
  static async create(medicine: MedicineInsert): Promise<Medicine> {
    console.log('üîç MedicineService.create() - Cr√©ation d\'un nouveau m√©dicament:', medicine.name);
    const { data: { user } } = await supabase.auth.getUser();
    console.log('üîç MedicineService.create() - Utilisateur actuel:', user?.id);
    
    const { data, error } = await supabase
      .from('medicines')
      .insert({
        ...medicine,
        created_by: user?.id
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå MedicineService.create() - Erreur lors de la cr√©ation du m√©dicament:', error);
      console.error('Error creating medicine:', error);
      throw error;
    }

    console.log('‚úÖ MedicineService.create() - M√©dicament cr√©√© avec succ√®s:', data.id, data.name);
    return data;
  }

  // Mettre √† jour un m√©dicament
  static async update(id: string, updates: MedicineUpdate): Promise<Medicine> {
    console.log('üîç MedicineService.update() - Mise √† jour du m√©dicament ID:', id, 'avec les donn√©es:', updates);
    const { data, error } = await supabase
      .from('medicines')
      .update(updates)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('‚ùå MedicineService.update() - Erreur lors de la mise √† jour du m√©dicament:', error);
      console.error('Error updating medicine:', error);
      throw error;
    }

    console.log('‚úÖ MedicineService.update() - M√©dicament mis √† jour avec succ√®s:', data.id, data.name);
    return data;
  }

  // Supprimer un m√©dicament
  static async delete(id: string): Promise<void> {
    console.log('üîç MedicineService.delete() - Suppression du m√©dicament ID:', id);
    const { error } = await supabase
      .from('medicines')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('‚ùå MedicineService.delete() - Erreur lors de la suppression du m√©dicament:', error);
      console.error('Error deleting medicine:', error);
      throw error;
    }
    
    console.log('‚úÖ MedicineService.delete() - M√©dicament supprim√© avec succ√®s:', id);
  }

  // Rechercher des m√©dicaments
  static async search(query: string): Promise<Medicine[]> {
    console.log('üîç MedicineService.search() - Recherche de m√©dicaments avec la requ√™te:', query);
    const { data, error } = await supabase
      .from('medicines')
      .select('*')
      .or(`name.ilike.%${query}%,manufacturer.ilike.%${query}%,description.ilike.%${query}%`)
      .order('name', { ascending: true });

    if (error) {
      console.error('‚ùå MedicineService.search() - Erreur lors de la recherche de m√©dicaments:', error);
      console.error('Error searching medicines:', error);
      throw error;
    }

    console.log('‚úÖ MedicineService.search() - Recherche termin√©e:', data?.length || 0, 'm√©dicaments trouv√©s');
    return data || [];
  }

  // Ajouter un mouvement de stock
  static async addStockMovement(movement: StockMovementInsert): Promise<StockMovement> {
    console.log('üîç MedicineService.addStockMovement() - Ajout d\'un mouvement de stock:', movement);
    const { data: { user } } = await supabase.auth.getUser();
    console.log('üîç MedicineService.addStockMovement() - Utilisateur actuel:', user?.id);
    
    const { data, error } = await supabase
      .from('stock_movements')
      .insert({
        ...movement,
        user_id: user?.id || ''
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå MedicineService.addStockMovement() - Erreur lors de l\'ajout du mouvement de stock:', error);
      console.error('Error adding stock movement:', error);
      throw error;
    }

    console.log('‚úÖ MedicineService.addStockMovement() - Mouvement de stock ajout√© avec succ√®s:', data.id, data.type, data.quantity);
    return data;
  }

  // R√©cup√©rer l'historique des mouvements de stock
  static async getStockMovements(medicineId?: string): Promise<StockMovement[]> {
    console.log('üîç MedicineService.getStockMovements() - R√©cup√©ration de l\'historique des mouvements', medicineId ? `pour le m√©dicament: ${medicineId}` : '');
    let query = supabase
      .from('stock_movements')
      .select(`
        *,
        medicine:medicines(name),
        user:profiles!user_id(first_name, last_name)
      `)
      .order('created_at', { ascending: false });

    if (medicineId) {
      query = query.eq('medicine_id', medicineId);
    }

    const { data, error } = await query;

    if (error) {
      console.error('‚ùå MedicineService.getStockMovements() - Erreur lors de la r√©cup√©ration des mouvements de stock:', error);
      console.error('Error fetching stock movements:', error);
      throw error;
    }

    console.log('‚úÖ MedicineService.getStockMovements() - Mouvements de stock r√©cup√©r√©s:', data?.length || 0, 'mouvements');
    return data || [];
  }

  // R√©cup√©rer les statistiques d'inventaire
  static async getInventoryStats() {
    console.log('üîç MedicineService.getInventoryStats() - R√©cup√©ration des statistiques d\'inventaire');
    const { data: medicines, error } = await supabase
      .from('medicines')
      .select('*');

    if (error) {
      console.error('‚ùå MedicineService.getInventoryStats() - Erreur lors de la r√©cup√©ration des statistiques d\'inventaire:', error);
      console.error('Error fetching inventory stats:', error);
      throw error;
    }

    const totalItems = medicines?.length || 0;
    const lowStockItems = medicines?.filter(m => m.current_stock <= m.min_stock).length || 0;
    const totalValue = medicines?.reduce((sum, m) => sum + (m.current_stock * m.unit_price), 0) || 0;
    
    const expiringSoon = medicines?.filter(m => {
      const daysToExpiry = Math.ceil(
        (new Date(m.expiry_date).getTime() - new Date().getTime()) / (1000 * 3600 * 24)
      );
      return daysToExpiry <= 90 && daysToExpiry > 0;
    }).length || 0;

    const stats = {
      totalItems,
      lowStockItems,
      expiringSoon,
      totalValue
    };
    
    console.log('‚úÖ MedicineService.getInventoryStats() - Statistiques d\'inventaire r√©cup√©r√©es:', stats);
    return stats;
  }
}