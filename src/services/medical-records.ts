import { supabase } from '../lib/supabase';
import { Database } from '../lib/database.types';

type MedicalRecord = Database['public']['Tables']['medical_records']['Row'];
type MedicalRecordInsert = Database['public']['Tables']['medical_records']['Insert'];
type MedicalRecordUpdate = Database['public']['Tables']['medical_records']['Update'];
type Prescription = Database['public']['Tables']['prescriptions']['Row'];
type PrescriptionInsert = Database['public']['Tables']['prescriptions']['Insert'];

export class MedicalRecordService {
  // R√©cup√©rer tous les dossiers m√©dicaux
  static async getAll(): Promise<MedicalRecord[]> {
    console.log('üîç MedicalRecordService.getAll() - D√©but de la r√©cup√©ration des dossiers m√©dicaux');
    const { data, error } = await supabase
      .from('medical_records')
      .select(`
        *,
        patient:patients(first_name, last_name, phone),
        doctor:profiles!doctor_id(first_name, last_name, speciality),
        prescriptions(*)
      `)
      .order('date', { ascending: false });

    if (error) {
      console.error('‚ùå MedicalRecordService.getAll() - Erreur lors de la r√©cup√©ration des dossiers m√©dicaux:', error);
      console.error('Error fetching medical records:', error);
      throw error;
    }

    console.log('‚úÖ MedicalRecordService.getAll() - Dossiers m√©dicaux r√©cup√©r√©s avec succ√®s:', data?.length || 0, 'dossiers');
    return data || [];
  }

  // R√©cup√©rer les dossiers m√©dicaux d'un patient
  static async getByPatient(patientId: string): Promise<MedicalRecord[]> {
    console.log('üîç MedicalRecordService.getByPatient() - R√©cup√©ration des dossiers du patient:', patientId);
    const { data, error } = await supabase
      .from('medical_records')
      .select(`
        *,
        doctor:profiles!doctor_id(first_name, last_name, speciality),
        prescriptions(*)
      `)
      .eq('patient_id', patientId)
      .order('date', { ascending: false });

    if (error) {
      console.error('‚ùå MedicalRecordService.getByPatient() - Erreur lors de la r√©cup√©ration des dossiers du patient:', error);
      console.error('Error fetching patient medical records:', error);
      throw error;
    }

    console.log('‚úÖ MedicalRecordService.getByPatient() - Dossiers du patient r√©cup√©r√©s:', data?.length || 0, 'dossiers');
    return data || [];
  }

  // R√©cup√©rer les dossiers m√©dicaux d'un m√©decin
  static async getByDoctor(doctorId: string): Promise<MedicalRecord[]> {
    console.log('üîç MedicalRecordService.getByDoctor() - R√©cup√©ration des dossiers du m√©decin:', doctorId);
    const { data, error } = await supabase
      .from('medical_records')
      .select(`
        *,
        patient:patients(first_name, last_name, phone),
        prescriptions(*)
      `)
      .eq('doctor_id', doctorId)
      .order('date', { ascending: false });

    if (error) {
      console.error('‚ùå MedicalRecordService.getByDoctor() - Erreur lors de la r√©cup√©ration des dossiers du m√©decin:', error);
      console.error('Error fetching doctor medical records:', error);
      throw error;
    }

    console.log('‚úÖ MedicalRecordService.getByDoctor() - Dossiers du m√©decin r√©cup√©r√©s:', data?.length || 0, 'dossiers');
    return data || [];
  }

  // Cr√©er un nouveau dossier m√©dical avec prescriptions
  static async create(
    recordData: MedicalRecordInsert,
    prescriptions: Omit<PrescriptionInsert, 'medical_record_id'>[] = []
  ): Promise<MedicalRecord> {
    console.log('üîç MedicalRecordService.create() - Cr√©ation d\'un nouveau dossier m√©dical:', recordData);
    console.log('üîç MedicalRecordService.create() - Prescriptions √† ajouter:', prescriptions.length);
    const { data: record, error: recordError } = await supabase
      .from('medical_records')
      .insert(recordData)
      .select()
      .single();

    if (recordError) {
      console.error('‚ùå MedicalRecordService.create() - Erreur lors de la cr√©ation du dossier m√©dical:', recordError);
      console.error('Error creating medical record:', recordError);
      throw recordError;
    }

    console.log('‚úÖ MedicalRecordService.create() - Dossier m√©dical cr√©√© avec succ√®s:', record.id);
    // Ajouter les prescriptions si elles existent
    if (prescriptions.length > 0) {
      console.log('üîç MedicalRecordService.create() - Ajout des prescriptions au dossier:', record.id);
      const { error: prescriptionError } = await supabase
        .from('prescriptions')
        .insert(
          prescriptions.map(prescription => ({
            ...prescription,
            medical_record_id: record.id
          }))
        );

      if (prescriptionError) {
        console.error('‚ùå MedicalRecordService.create() - Erreur lors de la cr√©ation des prescriptions:', prescriptionError);
        console.error('Error creating prescriptions:', prescriptionError);
        // Ne pas faire √©chouer la cr√©ation du dossier m√©dical
      } else {
        console.log('‚úÖ MedicalRecordService.create() - Prescriptions ajout√©es avec succ√®s:', prescriptions.length);
      }
    }

    return record;
  }

  // Mettre √† jour un dossier m√©dical
  static async update(id: string, updates: MedicalRecordUpdate): Promise<MedicalRecord> {
    console.log('üîç MedicalRecordService.update() - Mise √† jour du dossier m√©dical ID:', id, 'avec les donn√©es:', updates);
    const { data, error } = await supabase
      .from('medical_records')
      .update(updates)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('‚ùå MedicalRecordService.update() - Erreur lors de la mise √† jour du dossier m√©dical:', error);
      console.error('Error updating medical record:', error);
      throw error;
    }

    console.log('‚úÖ MedicalRecordService.update() - Dossier m√©dical mis √† jour avec succ√®s:', data.id);
    return data;
  }

  // Supprimer un dossier m√©dical
  static async delete(id: string): Promise<void> {
    console.log('üîç MedicalRecordService.delete() - Suppression du dossier m√©dical ID:', id);
    const { error } = await supabase
      .from('medical_records')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('‚ùå MedicalRecordService.delete() - Erreur lors de la suppression du dossier m√©dical:', error);
      console.error('Error deleting medical record:', error);
      throw error;
    }
    
    console.log('‚úÖ MedicalRecordService.delete() - Dossier m√©dical supprim√© avec succ√®s:', id);
  }

  // Ajouter une prescription √† un dossier m√©dical
  static async addPrescription(medicalRecordId: string, prescription: Omit<PrescriptionInsert, 'medical_record_id'>): Promise<Prescription> {
    console.log('üîç MedicalRecordService.addPrescription() - Ajout d\'une prescription au dossier:', medicalRecordId, prescription);
    const { data, error } = await supabase
      .from('prescriptions')
      .insert({
        ...prescription,
        medical_record_id: medicalRecordId
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå MedicalRecordService.addPrescription() - Erreur lors de l\'ajout de la prescription:', error);
      console.error('Error adding prescription:', error);
      throw error;
    }

    console.log('‚úÖ MedicalRecordService.addPrescription() - Prescription ajout√©e avec succ√®s:', data.id, data.medication);
    return data;
  }

  // Supprimer une prescription
  static async deletePrescription(prescriptionId: string): Promise<void> {
    console.log('üîç MedicalRecordService.deletePrescription() - Suppression de la prescription ID:', prescriptionId);
    const { error } = await supabase
      .from('prescriptions')
      .delete()
      .eq('id', prescriptionId);

    if (error) {
      console.error('‚ùå MedicalRecordService.deletePrescription() - Erreur lors de la suppression de la prescription:', error);
      console.error('Error deleting prescription:', error);
      throw error;
    }
    
    console.log('‚úÖ MedicalRecordService.deletePrescription() - Prescription supprim√©e avec succ√®s:', prescriptionId);
  }

  // Rechercher dans les dossiers m√©dicaux
  static async search(query: string): Promise<MedicalRecord[]> {
    console.log('üîç MedicalRecordService.search() - Recherche dans les dossiers m√©dicaux avec la requ√™te:', query);
    const { data, error } = await supabase
      .from('medical_records')
      .select(`
        *,
        patient:patients(first_name, last_name, phone),
        doctor:profiles!doctor_id(first_name, last_name, speciality),
        prescriptions(*)
      `)
      .or(`reason.ilike.%${query}%,diagnosis.ilike.%${query}%,symptoms.ilike.%${query}%`)
      .order('date', { ascending: false });

    if (error) {
      console.error('‚ùå MedicalRecordService.search() - Erreur lors de la recherche dans les dossiers m√©dicaux:', error);
      console.error('Error searching medical records:', error);
      throw error;
    }

    console.log('‚úÖ MedicalRecordService.search() - Recherche termin√©e:', data?.length || 0, 'dossiers trouv√©s');
    return data || [];
  }
}